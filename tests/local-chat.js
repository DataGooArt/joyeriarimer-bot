// local-chat.js

require('dotenv').config();
const readline = require('readline');
const mongoose = require('mongoose');

// Importamos el m√≥dulo principal de nuestro bot
const bot = require('./core/bot.js');
const { 
    handleSmartReply, 
    handleProductSelection, 
    handleTermsAcceptance, 
    handleCategorySelection,
    handleProductDetailRequest,
    handleProductAction,
    getModel, 
    Customer, 
    ChatSession, 
    MessageLog 
} = bot;
const whatsapp = require('./api/whatsapp.js');

// Variable para guardar los productos de la √∫ltima lista mostrada
let lastListedProducts = [];

// Funci√≥n para limpiar datos de prueba
async function cleanupTestData() {
    try {
        console.log('üßπ Limpiando datos de prueba anteriores...');
        
        // Eliminar cliente de prueba
        const deletedCustomers = await Customer.deleteMany({ phone: { $regex: '1234567890' } });
        console.log(`   - Clientes eliminados: ${deletedCustomers.deletedCount}`);
        
        // Eliminar sesiones de prueba
        const deletedSessions = await ChatSession.deleteMany({ phone: { $regex: '1234567890' } });
        console.log(`   - Sesiones eliminadas: ${deletedSessions.deletedCount}`);
        
        // Eliminar logs de prueba
        const deletedLogs = await MessageLog.deleteMany({});
        console.log(`   - Logs eliminados: ${deletedLogs.deletedCount}`);
        
        console.log('‚úÖ Datos de prueba limpiados. Iniciando con cliente fresco...\n');
    } catch (error) {
        console.log('‚ö†Ô∏è Error limpiando datos de prueba:', error.message);
    }
}

// Funci√≥n para limpiar datos de un cliente espec√≠fico
async function cleanupCustomerData(phoneNumber) {
    try {
        console.log(`üßπ Limpiando datos del cliente ${phoneNumber}...`);
        
        // Eliminar cliente espec√≠fico
        const deletedCustomers = await Customer.deleteMany({ phone: phoneNumber });
        console.log(`   - Clientes eliminados: ${deletedCustomers.deletedCount}`);
        
        // Eliminar sesiones espec√≠ficas
        const deletedSessions = await ChatSession.deleteMany({ phone: phoneNumber });
        console.log(`   - Sesiones eliminadas: ${deletedSessions.deletedCount}`);
        
        // Eliminar logs espec√≠ficos
        const deletedLogs = await MessageLog.deleteMany({ phone: phoneNumber });
        console.log(`   - Logs eliminados: ${deletedLogs.deletedCount}`);
        
        console.log('‚úÖ Datos del cliente limpiados.\n');
        return { customers: deletedCustomers.deletedCount, sessions: deletedSessions.deletedCount, logs: deletedLogs.deletedCount };
    } catch (error) {
        console.log('‚ö†Ô∏è Error limpiando datos del cliente:', error.message);
        throw error;
    }
}

// Sobrescribimos las funciones de env√≠o con nuestras versiones falsas (mocks)
whatsapp.sendTextMessage = async (to, text) => {
    console.log(`\nü§ñ Joyer√≠a Rimer: ${text}\n`);
};
whatsapp.sendImageMessage = async (to, imageUrl, caption) => {
    console.log(`\nü§ñ Joyer√≠a Rimer: ${caption}`);
    console.log(`   (Imagen: ${imageUrl})\n`);
};
whatsapp.sendProductListMessage = async (to, products, bodyText, buttonText) => {
    console.log(`\nü§ñ Joyer√≠a Rimer: ${bodyText}`);
    console.log(`   [Lista Interactiva: ${buttonText}]`);
    lastListedProducts = products; // Guardamos los productos
    if (products && products.length > 0) {
        // Mostramos la lista numerada para que el usuario pueda seleccionar
        products.forEach((p, index) => console.log(`   ${index + 1}. ${p.name}`));
    }
    console.log('');
};
whatsapp.sendFlowMessage = async (to, flowId, cta, screenId, headerText, bodyText) => {
    console.log('\n--- SIMULACI√ìN DE ENV√çO DE FLOW ---');
    console.log(`   Header: ${headerText}`);
    console.log(`   Body: ${bodyText}`);
    console.log(`   Bot√≥n (CTA): "${cta}"`);
    console.log('-------------------------------------\n');
};

// Simular los nuevos m√©todos de categor√≠as y productos
whatsapp.sendCategoriesMessage = async (to) => {
    console.log('\nü§ñ Joyer√≠a Rimer: üíé ¬°Bienvenido a Joyer√≠a Rimer! ¬øQu√© tipo de joya te interesa?');
    console.log('   [Botones Disponibles]');
    console.log('   1. üíç Anillos (escribe: cat_anillos)');
    console.log('   2. üîó Cadenas & Collares (escribe: cat_cadenas)');
    console.log('   3. üíé Aretes (escribe: cat_aretes)\n');
};

whatsapp.sendCategoryProducts = async (to, category) => {
    const categories = {
        'anillos': {
            title: 'üíç ANILLOS M√ÅS POPULARES',
            products: ['prod_solitario', 'prod_halo', 'prod_eternidad']
        },
        'cadenas': {
            title: 'üîó CADENAS & COLLARES M√ÅS POPULARES', 
            products: ['prod_tenis', 'prod_corazon', 'prod_clasica']
        },
        'aretes': {
            title: 'üíé ARETES M√ÅS POPULARES',
            products: ['prod_boton', 'prod_colgante', 'prod_aro']
        }
    };
    
    const categoryData = categories[category];
    if (categoryData) {
        console.log(`\nü§ñ Joyer√≠a Rimer: ${categoryData.title}`);
        console.log('   [Productos Disponibles]');
        categoryData.products.forEach((prod, index) => {
            console.log(`   ${index + 1}. ${prod} (escribe: ${prod})`);
        });
        console.log('');
    }
};

whatsapp.sendProductDetail = async (to, productId) => {
    const productNames = {
        'prod_solitario': 'Anillo Solitario Cl√°sico',
        'prod_halo': 'Anillo de Compromiso Halo',
        'prod_eternidad': 'Anillo Eternidad',
        'prod_tenis': 'Cadena Tenis Diamante',
        'prod_corazon': 'Collar Coraz√≥n Oro 18k',
        'prod_clasica': 'Cadena Cl√°sica Oro',
        'prod_boton': 'Aretes Bot√≥n Diamante',
        'prod_colgante': 'Aretes Colgantes Perla',
        'prod_aro': 'Aretes Aro Oro 18k'
    };
    
    const productName = productNames[productId] || productId;
    console.log(`\nü§ñ Joyer√≠a Rimer: Detalles de ${productName}`);
    console.log('   (Imagen del producto)');
    console.log('   [Acciones Disponibles]');
    console.log('   1. üí∞ Cotizar (escribe: cotizar_producto)');
    console.log('   2. üìÖ Agendar Cita (escribe: agendar_cita)');
    console.log('   3. üëÄ Ver M√°s (escribe: ver_mas_productos)\n');
};

const MONGO_URI = process.env.MONGO_URI;
const FAKE_PHONE_NUMBER = '1234567890'; // Usamos un n√∫mero falso para la prueba

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    prompt: 'Cliente > '
});

async function startChat() {
    try {
        await mongoose.connect(MONGO_URI);
        console.log('‚úÖ Conectado a MongoDB para la simulaci√≥n.');
        
        // LIMPIAR DATOS DE PRUEBA
        await cleanupTestData();
        
        console.log('--- INICIO DEL SIMULADOR DE CHAT ---');
        console.log('Escribe tu mensaje y presiona Enter. Escribe "salir" para terminar.');

        rl.prompt();

        rl.on('line', async (line) => {
            if (line.toLowerCase() === 'salir') {
                console.log('üëã ¬°Adi√≥s!');
                await mongoose.disconnect();
                process.exit(0);
            }

            // Intenta interpretar la entrada como un n√∫mero de selecci√≥n de la lista
            const selectionIndex = parseInt(line.trim(), 10) - 1;
            const isNumericSelection = !isNaN(selectionIndex) && selectionIndex >= 0;

            // Simulaci√≥n de selecci√≥n de lista
            if (isNumericSelection && lastListedProducts && lastListedProducts[selectionIndex]) {
                const selectedProduct = lastListedProducts[selectionIndex];
                console.log(`\n(Simulando selecci√≥n del producto: ${selectedProduct.name})`);
                await handleProductSelection(FAKE_PHONE_NUMBER, selectedProduct._id);
                // Limpiamos la lista para que no se pueda volver a seleccionar por accidente
                lastListedProducts = [];
            } else if (line.toLowerCase().startsWith('select ')) {
                // Mantenemos la l√≥gica de "select X" como alternativa
                console.log('\nSelecci√≥n inv√°lida o la lista ha expirado. Por favor, pide el cat√°logo de nuevo si lo necesitas.\n');
            } else if (line.trim().toLowerCase() === 'aceptar y continuar') {
                console.log('\n(Simulando clic en el bot√≥n "Aceptar y continuar")...');
                // Llamar directamente a la funci√≥n de aceptaci√≥n de t√©rminos
                await handleTermsAcceptance(FAKE_PHONE_NUMBER);
                // En producci√≥n, esto iniciar√≠a el siguiente paso. Lo simulamos aqu√≠.
                await handleSmartReply(FAKE_PHONE_NUMBER, "El usuario acaba de aceptar los t√©rminos.");
            } else if (line.toLowerCase().includes('aceptar y continuar') || line.toLowerCase().includes('acepto')) {
                console.log('\n(Simulando clic en el bot√≥n "Aceptar y continuar")...');
                // Usar handleSmartReply con un texto que active los patrones de aceptaci√≥n
                await handleSmartReply(FAKE_PHONE_NUMBER, 'acepto');
            } 
            // Manejar botones de categor√≠as
            else if (line.startsWith('cat_')) {
                console.log(`\n(Simulando clic en categor√≠a: ${line})`);
                await handleCategorySelection(FAKE_PHONE_NUMBER, line);
            }
            // Manejar botones de productos
            else if (line.startsWith('prod_')) {
                console.log(`\n(Simulando clic en producto: ${line})`);
                await handleProductDetailRequest(FAKE_PHONE_NUMBER, line);
            }
            // Manejar botones de acciones
            else if (['cotizar_producto', 'agendar_cita', 'ver_mas_productos'].includes(line)) {
                console.log(`\n(Simulando clic en acci√≥n: ${line})`);
                await handleProductAction(FAKE_PHONE_NUMBER, line);
            }
            else {
                // Llama a la l√≥gica principal del bot con el mensaje del usuario
                await handleSmartReply(FAKE_PHONE_NUMBER, line);
            }

            rl.prompt();
        });
    } catch (error) {
        console.error('‚ùå Error al iniciar el simulador:', error);
        process.exit(1);
    }
}

startChat();