// test-flow-webhook.js
// üß™ Test para verificar el manejo de respuestas del Flow

require('dotenv').config();
const { handleFlowDataExchange } = require('../../core/webhookHandler');

console.log('üîç PROBANDO MANEJO DE RESPUESTAS DEL FLOW\n');

// Simular datos que llegar√≠an del Flow de agendamiento
const testScenarios = [
    {
        name: 'Selecci√≥n de servicio',
        decryptedBody: {
            screen: 'select_service',
            data: {
                service: 'reparacion',
                service_name: 'Reparaci√≥n de joyas'
            },
            action: 'data_exchange'
        }
    },
    {
        name: 'Selecci√≥n de fecha',
        decryptedBody: {
            screen: 'select_date',
            data: {
                date: '2025-09-26',
                time: '10:00',
                display_date: 'jueves, 26 de septiembre de 2025',
                display_time: '10:00 AM'
            },
            action: 'data_exchange'
        }
    },
    {
        name: 'Finalizaci√≥n exitosa',
        decryptedBody: {
            screen: 'SUCCESS',
            data: {
                service: 'reparacion',
                date: '2025-09-26',
                time: '10:00',
                customer_name: 'Cliente Test',
                customer_phone: '1234567890'
            },
            action: 'data_exchange'
        }
    },
    {
        name: 'Pantalla desconocida',
        decryptedBody: {
            screen: 'unknown_screen',
            data: {},
            action: 'data_exchange'
        }
    }
];

async function testFlowWebhook() {
    let successCount = 0;
    
    for (let i = 0; i < testScenarios.length; i++) {
        const scenario = testScenarios[i];
        console.log(`üß™ Test ${i + 1}/${testScenarios.length}: ${scenario.name}`);
        
        try {
            const response = await handleFlowDataExchange(scenario.decryptedBody);
            
            if (response && response.data) {
                console.log(`   ‚úÖ Respuesta v√°lida:`, JSON.stringify(response.data, null, 2));
                successCount++;
            } else {
                console.log(`   ‚ùå Respuesta inv√°lida:`, response);
            }
        } catch (error) {
            console.log(`   ‚ùå Error: ${error.message}`);
        }
        
        console.log(''); // L√≠nea en blanco para separaci√≥n
    }
    
    console.log('üìä RESULTADOS:');
    console.log(`‚úÖ Tests exitosos: ${successCount}/${testScenarios.length}`);
    console.log(`‚ùå Tests fallidos: ${testScenarios.length - successCount}/${testScenarios.length}`);
    console.log(`üìà Tasa de √©xito: ${Math.round((successCount / testScenarios.length) * 100)}%`);
    
    if (successCount === testScenarios.length) {
        console.log('\nüéâ PERFECTO! Todas las respuestas del Flow se manejan correctamente');
        console.log('‚úÖ Webhook listo para recibir respuestas reales del Flow');
    } else {
        console.log('\n‚ö†Ô∏è  Algunos casos necesitan revisi√≥n');
    }
}

testFlowWebhook().catch(console.error);